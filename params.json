{
  "name": "Trackdown",
  "tagline": "TrackDown - Issue Tracking with plain Markdown. If you are missing the \"git clone\" for your tickets from github.com or bitbucket.org, then this is for you. A lightweight Ticketing System for distributed and unconnected small Teams.",
  "body": "# TrackDown\r\n\r\n[![Latest Release](https://img.shields.io/github/release/mgoellnitz/trackdown.svg)](https://github.com/mgoellnitz/trackdown/releases/latest)\r\n[![License](https://img.shields.io/github/license/mgoellnitz/trackdown.svg)](https://github.com/mgoellnitz/trackdown/blob/master/LICENSE)\r\n\r\nIssue Tracking with plain [Markdown][markdown].\r\n\r\nIn short: You are missing the \"git clone\" for your tickets from [GitLab][gitlab], \r\n[GitHub][github] or [Bitbucket][bitbucket] where we already have this for \r\ncode and wiki?\r\n\r\nYou need issue tracking which works for distributed and potentially disconnected\r\nsituations together with your distributed version control [GIT][git] and e.g. \r\nalso your distributed wiki editing through [GIT][git] as well?\r\n\r\nThen this here is for you!\r\n\r\nIt is not intended for large, permanently online or connected teams and heavy \r\nflows of tickets though, since you will be having only one file with plain \r\n[Markdown][markdown] with your issues - and optionally other stuff - collected \r\nin it.\r\n\r\nRoadmap [here](https://github.com/mgoellnitz/trackdown/blob/master/roadmap.md)\r\nand [here](https://gitlab.com/mgoellnitz/trackdown/blob/master/roadmap.md)\r\n\r\n# Design\r\n\r\nWhile TrackDown does not define an issue related workflow, it has some intended \r\nworkflow elements which are supported:\r\n\r\nThe issues are defined and maintained in a single [Markdown][markdown] file \r\nfollowing the format given here.\r\n\r\nThe [GIT][git] post-commit hook of TrackDown reads the commit messages and \r\nmodifies that issue collection if your commit messages relate to some of the \r\nissues.\r\n\r\nAdditionally a roadmap file is automatically maintained for your tickets.\r\nThis roadmap file groupd the issue headline in groups according to their\r\nversion label and illustrated progress counting issues in progress and resolved\r\nissues.\r\n\r\nThe issue collection this way is held local on your machine and not remote in \r\nthe database of a tracking system. (Which is something also [Fossil][fossil] \r\nsupports.) Like with the source code, it is pushed to remote repositories if \r\nneeded (or possible). The simple [Markdown][markdown] format and the usage of \r\n[GIT][git] as a backend support distributed, shared editing and later merging of \r\nthe issues and the related notes in the issue collection. (This is where the \r\nparallel with [Fossil][fossil] ends).\r\n\r\n\r\n# The Format\r\n\r\nWhile sticking to only partly structured [Markdown][markdown] the following \r\nelements should be maintainable with TrackDown:\r\n\r\n- ID\r\n- Title\r\n- Status\r\n- Commits\r\n- Target Version\r\n- Severity\r\n- Affected Versions\r\n- Description\r\n- Comments\r\n\r\nThese fields are mapped to the following source structure\r\n\r\n```\r\n  ## ID Title (status)\r\n\r\n  *Target Version (optional)* - Currently assigned to: `me` (optional)\r\n\r\n  ### severity (optional) priority (optional)\r\n\r\n  affected versions: 1.0, 1.1 (optional)\r\n\r\n  ### Description (optional)\r\n\r\n  description\r\n\r\n  ### Comments (optional)\r\n\r\n  comments (structured)\r\n\r\n  ### Commits (auto generated)\r\n\r\n  The headline commits at level three is optional. The commit messages are \r\n  inserted just as the last part of the issue's level two text area.\r\n```\r\n\r\nThe really fixed non optional parts of this are\r\n\r\n```\r\n  ## ID Title (status)\r\n\r\n  (Commit messages inserted here before the next ticket)\r\n```\r\n\r\n\r\n## Field Values\r\n\r\n### ID\r\n\r\nAny combination of (english) upper- and lower-case letters and digits.\r\n\r\n### Title\r\n\r\nAny expressible in Markdown.\r\n\r\n### Status\r\n\r\nAnything expressible in Markdown. Automatically set values are \"in progress\" if\r\nyou start committing for a certain ID and \"resolved\", if you are using a prefix\r\nof \"fixes ID\" or \"resolves ID\".\r\n\r\nOther intended values include \"new\", where the issue is just files, and \"closed\"\r\nwhen the solution is brought into production.\r\n\r\n### Target Version\r\n\r\nOnly digits, letters and dots. No spaces allowed.\r\n\r\n### Description\r\n\r\nAnything expressible in Markdown.\r\n\r\n### Affected Versions\r\n\r\nAnything expressible in Markdown. Is expected to describe which version are\r\naffected by the issue (if this is possible to say).\r\n\r\n### Comments\r\n\r\nAnything expressible in Markdown.\r\n\r\n### Severity\r\n\r\nAnything expressible in Markdown.\r\n\r\n\r\n# Setup\r\n\r\nThere are two ways to setup TrackDown: Have the issues file integrated in your\r\nsource code repository, or place it in a arbitrary place of your chosing.\r\n\r\nThe first - default - way is to use it in a separate branch of your source code \r\nrepository. It is kept visible and editable through a symbolic link at the\r\nroot level of the source code repository. Of course this file is touched\r\nautomatically via commits to your sourcecode through the post-commit hook of\r\nTrackDown.\r\n\r\nThe second way is to use the file at a different location - e.g. in the wiki of\r\nthe project instead of the source code repository, which is described later.\r\n\r\nIn both cases the automatically maintained roadmap file resides next to the\r\nissue collection file.\r\n\r\n## Initialize the Repository\r\n\r\nIf you want to track the issues in a TrackDown branch of your source code \r\nrepository and not in any other location of your chosing, you need to modify the \r\n[GIT][git] repository accordingly. Your source code repository must contain at \r\nleast one commit for this to work. To initialize a [GIT][git] repository that \r\nway, call the script\r\n\r\n```\r\ntrackdown.sh init\r\n```\r\n\r\nThis creates the TrackDown thread for the issue tracking. You have to manually\r\npropagate this thread to your upstream repositories. TrackDown does not\r\ninterfere with your remote workflow.\r\n\r\n```\r\ngit push original trackdown\r\n```\r\n\r\nInitialization must only be executed once for a repository and all of its forks \r\nand clones.\r\n\r\nIf you want to use the issue collection file from a different location, leave\r\nout this step.\r\n\r\n## Repository Integration\r\n\r\nRegardless of the location of the issue collection file, for each clone of the\r\nrepository you have to set up the TrackDown tooling to be able to use it\r\nintegrated with your source code [GIT][git] commits.\r\n\r\nTo start using TrackDown for the respective clone you have to issue\r\n\r\n```\r\ntrackdown.sh use\r\n```\r\n\r\nwhen using the TrackDown branch in the source code repository or\r\n\r\n```\r\ntrackdown.sh use <path/to/issues.md>\r\n```\r\n\r\nlike in\r\n\r\n```\r\ntrackdown.sh use ../wiki/issues.md\r\n```\r\n\r\nwhen using TrackDown with the issue collection file at a different location.\r\nAutomatic commit and push (see below) will be switched of in the latter case.\r\n\r\nThis creates a gitignored link issues.md in the root directory of your project\r\npointing to the issue collection file and it will configure a post-commit hook\r\nfor [GIT][git].\r\n\r\nAfter this step you can edit the issue collection file following the format\r\nmentioned here.\r\n\r\n\r\n# Commands in the Commit Messages\r\n\r\nTo support automatic reading of commit messages and modifying the issues\r\ncollection alongside you work, TrackDown relies on a [GIT][git] implementation, \r\nwhich is capable if executing the script hooks. \r\n\r\n[JGit ][jgit] is lacking this (for the post commit hooks used here) and as a \r\nresult NetBeans and Eclipse cannot use this mimik! With Eclipse you might be \r\nlucky using the [nightly builds](http://download.eclipse.org/egit/updates-nightly/) \r\nof JGit (Version 4.6 an up).\r\n\r\nRight now TrackDown understands only two commands in the commit messages. \r\n\r\n## refs #*id*[,*id*...]\r\n\r\nReference the commit in the list of commits at the end of the issue text.\r\n\r\n```\r\ngit commit -m \"refs #MYID - comment\" files...\r\n```\r\n\r\nThis command changes the state to \"in progress\" from anything like new, nothing,\r\nor even resolved. If the commit relates to more than one issue, the issues can be\r\nseparated by commas.\r\n\r\n```\r\ngit commit -m \"fixes #ONEID,ANOTHERID - comment\" files...\r\n```\r\n\r\n```\r\n(Future work: lifts the issue up to the top of the list)\r\n```\r\n\r\n## resolves|resolve|fixes #*id*[,*id*...]\r\n\r\nReference the commit in the list of commits at the end of the issue text.\r\n\r\n```\r\ngit commit -m \"fixes #MYID - comment\" files...\r\n```\r\n\r\nThis command changes the state to \"resolved\" from anything like new, nothing, or\r\nin progress. If the commit relates to more than one issue, the issues can be\r\nseparated by commas.\r\n\r\n```\r\ngit commit -m \"fixes #ONEID,ANOTHERID - comment\" files...\r\n```\r\n\r\n```\r\n(Future work: moves the issue to the top the part of the list where the resolved issues reside)\r\n```\r\n\r\n\r\n# Command Line Tools\r\n\r\nIn addition to the init and integration tools, the following commands are \r\navailable:\r\n\r\n## Roadmap\r\n\r\nProvided that the issues in the issue collection file are marked with version\r\nlabels like suggested, the command\r\n\r\n```\r\ntrackdown.sh roadmap\r\n```\r\n\r\nprints out a complete roadmap of the project sorted by \"target versions\" in \r\n[Markdown][markdown] format.\r\n\r\nThe term \"target version\" could also be read as \"release\" or \"sprint\" or \r\nanything which describes your development process best.\r\n\r\n\r\n## List\r\n\r\nThe command `ls` is used to show all issues marked for a given \"target version\" \r\nlike in\r\n\r\n```\r\ntrackdown.sh ls 1.1\r\n```\r\n\r\nwhere all issues intended to be completed in \"target version\" 1.1 are listed.\r\n\r\nThe term \"target version\" could also be read as \"release\" or \"sprint\" or \r\nanything which describes your development process best.\r\n\r\n\r\n## Copy Milestone/Release Contents\r\n\r\nThe comman `copy` is used to extract the issues related to a given milestone,\r\nrelease, version, or whatever your terinology might be to a separate file\r\nnamed after the given parameter. So\r\n\r\n```\r\ntrackdown.sh copy 1.1\r\n```\r\n\r\ncopies all notes for the issues marked with \"1.1\" as a version marker to a\r\nseparate file 1.1.md to obtain release notes and get the resolved issues from\r\nthe base issue collection file for your current work.\r\n\r\n\r\n## Issues\r\n\r\nThe command\r\n\r\n```\r\ntrackdown.sh issues\r\n```\r\n\r\nlists all potential issues in the issue collection. Potential means in this case,\r\nthat there may be some false positives if there are additional elements in your\r\nissue collection file, which might be interpreted as issues.\r\n\r\nOptionally you can add a path to an issue collection file as a parameter like in\r\n\r\n```\r\ntrackdown.sh issues ../wiki/issues.md\r\n```\r\n\r\n\r\n## My Tickets\r\n\r\nThe command\r\n\r\n```\r\ntrackdown.sh mine\r\n```\r\n\r\nlists all issues in the issue collection, which are marked with a\r\n\r\n```\r\n*Version 1.0* - Currently assigned to: `me`\r\n```\r\n\r\nThe `me` placeholder in the case is taken - in that order - from\r\n\r\n* the first parameter on the command line\r\n* The `me` entry in the `.trackdown/config` file\r\n* The local user name from the environment variable `$USER`\r\n\r\nOptionally you can add a path to an issue collection file as an additional parameter \r\nlike in\r\n\r\n```\r\ntrackdown.sh mine ../wiki/issues.md\r\n```\r\n\r\nor\r\n\r\n```\r\ntrackdown.sh mine UserName ../wiki/issues.md\r\n```\r\n\r\n\r\n# Configuration\r\n\r\nThe source repository contains a directory named .trackdown.\r\n\r\nThis directory contains a file named config. There are some options in this\r\nfile, which you might want to change.\r\n\r\nExample config file for TrackDown:\r\n\r\n```\r\n  autocommit=true\r\n  autopush=false\r\n  location=../wiki/issues.md\r\n  prefix=https://github.com/user/project/commit/\r\n  me=My Name\r\n```\r\n\r\n## Auto Commit all Issue Collection Changes\r\n\r\nAutomatically commits the new change to the trackdown branch. If you didn't\r\nchange the default location where your source code repository contains the \r\na trackdown branch, you will want to leave the unchanged with the default\r\nvalue `true`.\r\n\r\nIn other scenarios you may switch it to `false`.\r\n\r\n## Auto Push all Issue Collection Commits\r\n\r\nAutomatically pushes after each commit to the upstream repository. If you didn't\r\nchange the default locations where your source code repository is the upstream \r\nrepository of your issue collection you will want to leave the unchanged\r\nwith the default value `true`.\r\n\r\nIn other scenarios you may switch it to false. E.g. if the issue collection is\r\npart of your project wiki then automatic pushing might lead to remote \r\noperations, which is not desirable.\r\n\r\n## Online commit summary prefix\r\n\r\nWith some GIT backends it is possible to obtain summary with changes and \r\ncommit message online for every commit. To use this facility place a prefix\r\nin the config file where hash of a commit can be appended to for a valid\r\nlink for that commit.\r\n\r\nIt TrackDown discovers common GIT services it tries to automatically discover\r\nthe correct prefix für URLs pointing to single commits.\r\n\r\n## Username for assignments\r\n\r\nTo allow to work with the user assignment of tickets, the name as used in the\r\nissue collection file can be added here, so that listing of tickets for the\r\ncurrent user is possible.\r\n\r\nThe assignment will no automatically added to the ticket if that user uses\r\na commit message related to a ticket, but just the progress flag will be set.\r\n\r\n\r\n# Installation\r\n\r\nJust copy the files from bin/ to a place on your $PATH for now. Perhaps we will\r\nadd something more convenient later. For some functions - especially in the\r\narea of issue tracker mirror - [jq][jq] needs to be installed.\r\n\r\nOf course this way the remaining Windows users are locked out.\r\n\r\nA symbolic link `td` to the `trackdown.sh` script is recommended for easier\r\nuse.\r\n\r\n## Prerequisites\r\n\r\nTrackDown relies on a [GIT][git] installation available on the path.\r\n\r\n## Compatibility\r\n\r\nTrackDown is tested to work with Ubuntu 12.04 and newer. It is expected to work\r\non similar Linux systems and MacOS systems.\r\n\r\nThere are no plans to support Windows systems except where Un*x like layers as\r\ncygwin are in use.\r\n\r\n\r\n# Related Projects\r\n\r\nI only came accross relates projects which have certain limitations or are \r\nunmaintained. In each case the limitations have an extent that kept me from\r\nusing these systems except for very small or test projects.\r\n\r\n## Fossil SCM\r\n\r\nWhat I liked about fossil is, that it brings the three core elements of development\r\n\r\n- Source Code\r\n- Documentation or Notes (Wiki)\r\n- Issues\r\n\r\nlocal to my machine for distributed development or disconnected situations.\r\n\r\nYou don't have to maintain backups since the remote instances are your backups \r\nof the source code, wiki, and ticketing state.\r\n\r\nIt does not have a wiki capable of shared editing with later merging like the\r\n[GIT][git] based wikis of [GitLab][gitlab], [GitHub][github], or \r\n[Bitbucket][bitbucket].\r\n\r\nAlso it is not possible to the contents of the wiki outside the [Fossil][fossil] \r\ncontext e.g. for a documentation web site, since you cannot export the wikis\r\nraw data. (Yes, [Fossil][fossil] provides means to usr the wiki directly as\r\na documentation site system, which is similar but not exactly the same.)\r\n\r\nThe drawback is, that it does all these things by creating a nearly closed shop \r\nsystem not open to re-use of these elements and not open to external tooling \r\noutside the [Fossil][fossil] scripting facility.\r\n\r\nAdditionally I have to keep the [Fossil][fossil] internal web server running for\r\neach repository I am using, to be able to read the notes and issues for a \r\nproject.\r\n\r\nAlso there is only poor IDE support for [Fossil][fossil] right now, with the\r\nexception of Support for [Idea](https://plugins.jetbrains.com/plugin/7479) \r\nand my own small [plug-in for NetBeans](http://chiselapp.com/user/backendzeit/repository/netbeans-fossil-plugin/index)\r\nmirrored [here](https://github.com/mgoellnitz/netbeans-fossil-plugin).\r\n\r\n## Bitbucket\r\n\r\n[Bitbucket.org][bitbucket] a brilliant tool for Open Source or small projects.  \r\nIt has decent VCS solutions, a WIKI which can be used distributed through \r\n[GIT][git].\r\n\r\nThe only thing I'm missing is the distributed offline work for ticketing.\r\n\r\nSo in this case it is possible to leave out the ticketing of [Bitbucket][bitbucket] \r\nand use TrackDown with [Bitbucket][bitbucket] as the [GIT][git] based \r\nstorage backend. And this is exactly what TrackDown was designed for.\r\n\r\n## GitHub\r\n\r\n[GitHub][github] is the most used solution for [GIT][git] powered projects\r\ntogether with a [GIT][git] based wiki (as opposed to Bitbucket and GitLab\r\nthe Wiki is a flat folder) and many other usefull details.\r\n\r\nThe only thing I'm missing is the distributed offline work for ticketing.\r\n\r\nSo in this case it is possible to leave out the ticketing of [GitHub][github] \r\nand use TrackDown with [GitHub][github] as the [GIT][git] based \r\nstorage backend. And this is exactly what TrackDown was designed for.\r\n\r\nAs an alternative you can at least mirror the issues from [GitHub][github] to\r\nhave the notes with you and now the issue IDs for offline code commits.\r\n\r\n## GitLab\r\n\r\n[GitLab][gitlab] not only is a good online solution but also is a piece of\r\ninstallable software (like Bitbucket as the renamed Stash is also...). It's\r\nwiki is also [GIT][git] based wiki and it comes with a wealth of other\r\nintegration and usefull tools and details.\r\n\r\nThe only thing I'm missing is the distributed offline work for ticketing.\r\n\r\nSo in this case it is possible to leave out the ticketing of [GitLab][gitlab] \r\nand use TrackDown with [GitLab][gitlab] as the [GIT][git] based \r\nstorage backend. And this is exactly what TrackDown was designed for.\r\n\r\nAs an alternative you can at least mirror the issues from [GitLab][gitlab] to\r\nhave the notes with you and now the issue IDs for offline code commits.\r\n\r\n## Trac\r\n\r\nA few years ago a colleague stated that he is running a local VM for each \r\nproject, he is involved with, to take notes, track issues, and maintain source \r\ncode.\r\n\r\nOf course this does not imply shared use of the Trac service or disconnected use.\r\n\r\nAlso while Trac is a brilliant tool, this leaves me with the necessity to \r\nmaintain the locally running instances and take backups of them in addition to \r\nthe project VCS and source code repositories. This is not the case for the \r\n[GIT][git] based solutions in this list, which have a remote repository as a \r\nbackup wiki and source code.\r\n\r\n## MDWiki\r\n\r\nUnlike [Blogdown](https://github.com/gernest/blogdown) where you again start\r\na server - but this time on localhost, [MDWiki][mdwiki] just runs in your\r\nbrowser to view Markdown files nicely formatted locally.\r\n\r\n```\r\nfile:///home/me/somewhere/thats/green/repo/wiki.html#!issues.md\r\nfile:///home/me/somewhere/thats/green/repo/wiki.html#!roadmap.md\r\n```\r\n\r\nThe output of Trackdown looks pretty usable in this setup and gives a good\r\noverview of the issues as the roadmap.\r\n\r\nWhen you also use GitLab, GitHub, or Bitbucket Wikis, [MDWiki][mdwiki] has\r\na different understanding, how links should be interpreted. To get a fully\r\ncompatible local and remote viewing setup for these cases, a patched\r\nversion of [MDWiki][mdwiki] [exists on GitHub](https://github.com/mgoellnitz/mdwiki/).\r\n\r\n## Unmaintained related Projects\r\n\r\nThese seem to address similar issues, but are not under active development\r\n\r\n - https://github.com/glogiotatidis/gitissius\r\n - https://github.com/keredson/distributed-issue-tracker\r\n\r\n\r\n# Migration\r\n\r\nTo facilitate the use of TrackDown, the option of migrating an existing base\r\nof tickets is of course helpful. The choice, which systems are taken as a\r\ndata source for such a migration is driven by personal needs.\r\n\r\n\r\n## GitHub Offline Mirror\r\n\r\nFor disconnected situations which TrackDown is supposed to support, it is\r\npossible to connect a workspace to its [GitHub][github] issue tracker and\r\nmirror tickets for offline use.\r\n\r\nThe mirror - of course - is not intended for changeing the issues in the issue \r\ncollection file. State changes will most likely be triggered on [GitHub][github] \r\nby your commit messages or manually, after which a call of the mirroring script\r\ncan be helpfull.\r\n\r\nInstead of `trackdown.sh use` issue `trackdown.sh github` to setup the mirror\r\nconnection.\r\n\r\n```\r\ntrackdown.sh github <apitoken> <projectname> <owner>\r\n```\r\n\r\nAfterwards anytime you can connect to the [GitHub][github] system, collect the \r\ncurrent mirror state to you local issue collection file and the roadmap.\r\n\r\n```\r\ntrackdown.sh mirror\r\n```\r\n\r\n\r\n## GitLab Offline Mirror\r\n\r\nFor disconnected situations which TrackDown is supposed to support, it is\r\npossible to connect a workspace to its [GitLab][gitlab] issue tracker and\r\nmirror tickets for offline use.\r\n\r\nThe mirror - of course - is not intended for changeing the issues in the issue \r\ncollection file. State changes will most likely be triggered on [GitLab][gitlab] \r\nby your commit messages or manually, after which a call of the mirroring script\r\ncan be helpfull.\r\n\r\nInstead of `trackdown.sh use` issue `trackdown.sh gitlab` to setup the mirror\r\nconnection.\r\n\r\n```\r\ntrackdown.sh gitlab <apitoken> <projectname> [https://<gitlab.host>]\r\n```\r\n\r\nIf you ommit the url prefix, `https://gitlab.com` is used.\r\n\r\nAfterwards anytime you can connect to the [GitLab][gitlab] system, collect the \r\ncurrent mirror state to you local issue collection file and the roadmap.\r\n\r\n```\r\ntrackdown.sh mirror\r\n```\r\n\r\nAdditionally - since you now are on your command line and perhaps don't want\r\nto switch windows evey second - there is a `remote` command to issue commands\r\non the remote mirroring source system.\r\n\r\n```\r\ntrackdown.sh remote assign 68 XYZ\r\nAssigning XYZ to user 68 \r\n```\r\n\r\nYou have to provide the issues *real* id - not the short one - and the id of\r\nthe user, which is also always exported to the issue collection file to \r\nfacility this.\r\n\r\n\r\n## Gogs Offline Mirror\r\n\r\nFor disconnected situations which TrackDown is supposed to support, it is\r\npossible to connect a workspace to its [Gogs][gogs] issue tracker and mirror \r\ntickets for offline use.\r\n\r\nThis is supposed to work with [Pikacode](pikacode) as the available instance\r\nin the cloud and the community managed fork [Gitea][gitea].\r\n\r\nThe mirror - of course - is not intended for changeing the issues in the issue \r\ncollection file. State changes will most likely be triggered on the [Gogs][gogs]\r\ninstance in use  by your commit messages or manually, after which a call of the \r\nmirroring script can be helpfull.\r\n\r\nInstead of `trackdown.sh use` issue `trackdown.sh gogs` to setup the mirror\r\nconnection.\r\n\r\n```\r\ntrackdown.sh gogs <apitoken> <projectname> [https://<gogs.host>]\r\n```\r\n\r\nIf you ommit the url prefix, `https://v2.pikacode.com` is used.\r\n\r\nAfterwards anytime you can connect to the [gogs][gogs] system, collect the \r\ncurrent mirror state to you local issue collection file and the roadmap.\r\n\r\n```\r\ntrackdown.sh mirror\r\n```\r\n\r\n\r\n## Bitbucket.org Offline Mirror\r\n\r\nFor disconnected situations which TrackDown is supposed to support, it is\r\npossible to connect a workspace to its [Bitbucket.org][bitbucket] issue \r\ntracker and mirror tickets for offline use.\r\n\r\nSome of my stalled projects reside therer and I already did an export of the\r\nissue tracker contents, which [Bitbucket.org][bitbucket] support, and now added\r\nthe offline mirror capabililties to this tool for smother migration away from\r\nthe prorietary issue tracker.\r\n\r\nThe mirror again is not intended for changeing the issues in the issue \r\ncollection file. State changes will most likely be triggered on \r\n[Bitbucket.org][bitbucket] by your commit messages or manually, after which a \r\ncall of the mirroring script can be helpfull.\r\n\r\nInstead of `trackdown.sh use` issue `trackdown.sh github` to setup the mirror\r\nconnection.\r\n\r\n```\r\ntrackdown.sh bitbucket <projectname> <owner>\r\n```\r\n\r\nAfterwards anytime you can connect to the [Bitbucket.org][bitbucket] system, \r\ncollect the current mirror state to you local issue collection file and the \r\nroadmap.\r\n\r\n```\r\ntrackdown.sh mirror\r\n```\r\n\r\nIn the case of [Bitbucket.org][bitbucket], the mirror script has to ask for\r\nyou password on bitbucket, since the are no secure API tokens available as far\r\nas I know.\r\n\r\n\r\n## Redmine\r\n\r\nFor historical reasons my [Tangram](https://github.com/mgoellnitz/tangram)\r\nproject uses [Redmine][redmine] and customers also use [Redmine][redmine]. So \r\nthere are two scenarios where some interfacing would be helpful.\r\n\r\nIn addition the roadmap outline of TrackDown is very much inspired from the \r\n[Redmine][redmine] roadmap page.\r\n\r\n### Offline mirror\r\n\r\nSince I'm - sad enough - not in the position to tell my enterprise scale\r\ncustomers which ticketing systems to use, there is still the need to have\r\nthe issue descriptions, ticket ID, target versions, affected versions and\r\neven the roadmap available offline.\r\n\r\nFor an offline mirror without the capability to change the status of tickets,\r\nthe following setup workflow is used instead of the steps given above:\r\n\r\nInstead of `trackdown.sh use` issue `trackdown.sh redmine` to setup the mirror\r\nconnection.\r\n\r\n```\r\ntrackdown.sh redmine <apikey> <projectname> https://<redmine.host>/\r\n```\r\n\r\nAfterwards anytime you can connect to the [Redmine][redmine] system, collect the \r\ncurrent mirror state to you local issue collection file and the roadmap.\r\n\r\n```\r\ntrackdown.sh mirror\r\n```\r\n\r\nAdditionally - since you now are on your command line and perhaps don't want\r\nto switch windows evey second - there is a `remote` command to issue commands\r\non the remote mirroring source system.\r\n\r\n```\r\ntrackdown.sh remote comment XYZ \"Hi there.\"\r\nAdding comment \"Hi there.\" to XYZ\r\n```\r\n\r\n```\r\ntrackdown.sh remote assign 68 XYZ\r\nAssigning XYZ to user 68 \r\n```\r\n\r\nYou have to provide the id of the user - not its name, which is also always \r\nexported to the issue collection file to facility this.\r\n\r\n\r\n### Migration\r\n\r\nWhen you think this information mirrored right now is sufficient to cut the ties,\r\nyou can setup the created issue collection and roadmap as the repository and do \r\na `trackdown.sh use`.\r\n\r\nThe full migration is not covered by a command yet and setting up mirrored data \r\nin the special TrackDown branch must be accomplished manually.\r\n\r\n\r\n[markdown]: https://daringfireball.net/projects/markdown/\r\n[git]: http://git-scm.com/\r\n[trac]: http://trac.edgewall.org/\r\n[bitbucket]: https://bitbucket.org/\r\n[fossil]: http://fossil-scm.org/index.html/doc/trunk/www/index.wiki\r\n[gitlab]: https://gitlab.com/\r\n[github]: https://github.com/\r\n[jgit]: https://eclipse.org/jgit/\r\n[redmine]: http://www.redmine.org/\r\n[gogs]: https://gogs.io/\r\n[gitea]: https://gitea.io/\r\n[pikacode]: https://v2.pikacode.com/\r\n[mdwiki]: http://mdwiki.info\r\n[jq]: https://stedolan.github.io/jq/\r\n\r\n\r\n# Issues\r\n\r\nRight now we have three areas/iterations/sprints in this issue list:\r\n\r\n- *1.0* This should be accomplished before an 1.0 release.\r\n- *mirror* Everything related to just mirroring issue collection is collected here\r\n- *nth* This feature is nice to have but can be left out.\r\n- *oos* This issue is relevant but out of the scope of this project.\r\n\r\n## NETBEANS interoperation not working due to missing hook implementation in JGit (in progress)\r\n\r\n*oos*\r\n\r\nWhile some IDE integrations rely on the [GIT][git] command line tooling and thus \r\nwork perfectly together with this project, NetBeans decided to use the [JGit][jgit] \r\nlibrary, which only supports a subsets of the [GIT][git] hooks - and not the \r\nones we  use here.\r\n\r\nI already helped to add the post-commit hook which is needed by this project\r\nand it now is part of the latest nightly builds. Interoperation with trackdown\r\ncould not be tested so far.\r\n\r\n## MIRRORHOOK for update of the local mirror and roadmap for mirrored issue collections\r\n\r\n*mirror*\r\n\r\nFor users of the mirror feature of collections with Redmine, GitHub, Gitlab, \r\nand Gogs a hook implementation should mirror the issue collection on push\r\nto keep it updated in exactly the situations where the local machine must\r\nbe connected to the remote site - or at least somehow to the internet.\r\n\r\n## GITLAB offline mirror (in progress)\r\n\r\n*mirror*\r\n\r\nTrackdown should be capable of translating [GitLab][gitlab] JSON exports of \r\ntickets to the special markdown format given here as a mirror for offline use.\r\n\r\n Martin Goellnitz  / Sun Nov 13 19:10:27 2016 [29eb793d1caa2e42c1f120aa31e7ceb27929ca6b](https://github.com/mgoellnitz/trackdown/commit/29eb793d1caa2e42c1f120aa31e7ceb27929ca6b)\r\n\r\n    refs #GITLAB mirror in its first incarnation as another mirror type\r\n\r\n Martin Goellnitz  / Sun Nov 13 19:11:43 2016 [d239356055272bdd0af6cad32925bb259785717d](https://github.com/mgoellnitz/trackdown/commit/d239356055272bdd0af6cad32925bb259785717d)\r\n\r\n    refs #GITLAB offline testing was still in place\r\n\r\n Martin Goellnitz  / Sun Nov 13 19:29:46 2016 [4940d3cf9d3182d0fe591ea82ea94d0651703ffd](https://github.com/mgoellnitz/trackdown/commit/4940d3cf9d3182d0fe591ea82ea94d0651703ffd)\r\n\r\n    refs #GITLAB remote command to assign tickets added\r\n\r\n Martin Goellnitz  / Sun Nov 13 19:52:31 2016 [34e0dcec0c72fc0fafe0887a966e392163d6df44](https://github.com/mgoellnitz/trackdown/commit/34e0dcec0c72fc0fafe0887a966e392163d6df44)\r\n\r\n    refs #GITLAB issues exports should at least be usable up to 100 issues\r\n\r\n## GITHUB offline mirror (in progress)\r\n\r\n*mirror*\r\n\r\nTrackdown should be capable of translating [GitHub][github] JSON exports of \r\ntickets to the special markdown format given here as a mirror for offline use.\r\n\r\n Martin Goellnitz  / Sun Nov 13 21:19:35 2016 [35a52a9d751029ac5cbc3730ea28a3fc682663ce](https://github.com/mgoellnitz/trackdown/commit/35a52a9d751029ac5cbc3730ea28a3fc682663ce)\r\n\r\n    refs #GITHUB mirroring in its first incarnation of yet another mirror type\r\n\r\n Martin Goellnitz  / Tue Dec 6 18:19:54 2016 [8ec2c02ebfd241b9b8599ef0fd0b3ebf763907e2](https://github.com/mgoellnitz/trackdown/commit/8ec2c02ebfd241b9b8599ef0fd0b3ebf763907e2)\r\n\r\n    refs #GITHUB automatically discover single commit URLs für github and the others\r\n\r\n\r\n*mirror*\r\n\r\nFor how historical reasons I have projects with [Redmine][redmine] ticketing in \r\nuse and with still relevant tickets. Some of them might even be a candidate to \r\nmigrate to Trackdown for others it might be sufficient to get a current offline \r\nmirror when the repository is not available.\r\n\r\nTrackdown should be capable of translating [Redmine][redmine] JSON exports of \r\ntickets to the special markdown format given here. \r\n\r\nFor the mirror scenario, certain \r\nlimitations are acceptable, \r\n\r\nFor  migration scenarios the commit lists should be included and even closed \r\ntickets should be taken into account to not lose the relevant parts of the\r\nproject history.\r\n\r\n Martin Goellnitz  / Sun Nov 13 01:22:34 2016 [dcf643bf7b21300561013b6cd5fbf202a0567009](https://github.com/mgoellnitz/trackdown/commit/dcf643bf7b21300561013b6cd5fbf202a0567009)\r\n\r\n    refs #REDMINE mirroring started\r\n\r\n Martin Goellnitz  / Sun Nov 13 01:51:12 2016 [de3417d6789e59219d8d9616d5498c857f33cb32](https://github.com/mgoellnitz/trackdown/commit/de3417d6789e59219d8d9616d5498c857f33cb32)\r\n\r\n    refs #REDMINE mirror users don't have to use git for this purpose - smarter .gitignore handling alongside\r\n\r\n Martin Goellnitz  / Sun Nov 13 02:48:36 2016 [7211c3ce7b6f7bed464fa6c866239b5ced3bd4e2](https://github.com/mgoellnitz/trackdown/commit/7211c3ce7b6f7bed464fa6c866239b5ced3bd4e2)\r\n\r\n    refs #REDMINE mirror shoud overwrite issue collection and no always append\r\n\r\n Martin Goellnitz  / Sun Nov 13 12:21:00 2016 [a82c03fdf6356ef4079446fe7f3d75cae80124d7](https://github.com/mgoellnitz/trackdown/commit/a82c03fdf6356ef4079446fe7f3d75cae80124d7)\r\n\r\n    refs #REDMINE mirror command should be named mirror and the old sync command keep that name\r\n\r\n Martin Goellnitz  / Sun Nov 13 12:55:45 2016 [a745c43eb4a444bae91dc15d2b601f78e63e8722](https://github.com/mgoellnitz/trackdown/commit/a745c43eb4a444bae91dc15d2b601f78e63e8722)\r\n\r\n    refs #REDMINE mirror now extracts more details from the original tickets\r\n\r\n## BITBUCKET issue tracker offline mirror (in progress)\r\n\r\n*mirror*\r\n\r\nTrackdown should be capable of translating [Bitbucket.org][bitbucket] JSON \r\nexports of tickets to the special markdown format given here as a mirror for \r\noffline use. \r\n\r\n Martin Goellnitz  / Sat Dec 3 13:05:30 2016 [53f1165e8e009ca843909c6d67daaabc7a318f6c](https://github.com/mgoellnitz/trackdown/commit/53f1165e8e009ca843909c6d67daaabc7a318f6c)\r\n\r\n    refs #BITBUCKET support started in a first basic version\r\n\r\n## GOGS and gitea offline mirror (in progress)\r\n\r\n*mirror*\r\n\r\nTrackdown should be capable of translating [gogs][gogs] JSON exports of \r\ntickets to the special markdown format given here as a mirror for offline use.\r\nThis also adds [gitea][gitea] and has a public instance at [Pikacode][pikacode],\r\nwhich can be used as a default.\r\n\r\n Martin Goellnitz  / Sat Dec 3 02:56:16 2016 [e438fa86d8f6d112565899dcbfec466001ea13b4](https://github.com/mgoellnitz/trackdown/commit/e438fa86d8f6d112565899dcbfec466001ea13b4)\r\n\r\n    refs #GOGS support initiated with reasonable output in the first step\r\n\r\n Martin Goellnitz  / Sat Dec 3 03:03:44 2016 [58a55bc60edc6b451722b6d96b7c598ff8a39522](https://github.com/mgoellnitz/trackdown/commit/58a55bc60edc6b451722b6d96b7c598ff8a39522)\r\n\r\n    refs #GOGS related commands missed their documentation\r\n\r\n## ASSIGNMENT of issues should be part of the format and tooling (in progress)\r\n\r\n*1.0*\r\n\r\nWe need a facility to deal with assignments of tickets to illustrate, who\r\nis currently working on an issue at least as an optional part of the format.\r\n\r\nAdditionally some support in the tooling is needed to list issues assigned\r\nto the current user\r\n\r\n\r\n Martin Goellnitz  / Sun Nov 13 14:47:12 2016 [0aaf357d1474a3877db9da977b9aadba7d9ed6a5](https://github.com/mgoellnitz/trackdown/commit/0aaf357d1474a3877db9da977b9aadba7d9ed6a5)\r\n\r\n    refs #ASSIGNMENT of issues to me now listable\r\n\r\n## COPY release notes. (in progress)\r\n\r\n*1.0*\r\n\r\nWhen closing a release or sprint, it should be possible to copy all the resolved\r\nissues to a new [Markdown][markdown] file to remove them from the issue \r\ncollection and have a contribution to release notes.\r\n\r\n Martin Goellnitz  / Tue Dec 6 00:40:57 2016 [54ffed9d2f60172195089bdbd13c6bca4828c98b](https://github.com/mgoellnitz/trackdown/commit/54ffed9d2f60172195089bdbd13c6bca4828c98b)\r\n\r\n    refs #COPY release notes\r\n\r\n Martin Goellnitz  / Tue Dec 6 00:53:17 2016 [42a073d10652ea3d3c72d82b72ca0f77c7511bb0](https://github.com/mgoellnitz/trackdown/commit/42a073d10652ea3d3c72d82b72ca0f77c7511bb0)\r\n\r\n    refs #COPY command needs documentation\r\n\r\n## ROADMAP should show percentage for issues already started (resolved)\r\n\r\n*1.0*\r\n\r\nAs with the number of resolved issues there should be a second value for\r\nthe work in progress.\r\n\r\n Martin Goellnitz  / Tue Nov 8 20:03:51 2016 [2535f73db2aca2049a018f5b705e2604dc98f28b](https://github.com/mgoellnitz/trackdown/commit/2535f73db2aca2049a018f5b705e2604dc98f28b)\r\n\r\n    refs #ROADMAP output enhancement\r\n\r\n Martin Goellnitz  / Wed Nov 9 00:55:22 2016 [0bd7768acc26577da36ae808e21d72deb70452e7](https://github.com/mgoellnitz/trackdown/commit/0bd7768acc26577da36ae808e21d72deb70452e7)\r\n\r\n    resolve #ROADMAP enhancements\r\n\r\n## SETUP tracking repository symmetrically (resolved)\r\n\r\n*1.0*\r\n\r\nThe local tracking branch with its special checkout should be setup symmetrically\r\nto ther root repository checkout with simple push style and user and email\r\nset up locally.\r\n\r\n Martin Goellnitz  / Wed Nov 9 01:42:57 2016 [674b85ec7bebbf36618b000098c9195893fc3f90](https://github.com/mgoellnitz/trackdown/commit/674b85ec7bebbf36618b000098c9195893fc3f90)\r\n\r\n    resolve #SETUP tracking repository symmetrically\r\n\r\n## SYNCHRONIZE roadmap also on unhandled commits (resolved)\r\n\r\n*1.0*\r\n\r\nThe roadmap file should be updated on every commit since there might be\r\nchanges in the issue collection file not produced by the commit hook script\r\nwhich might affect the roadmap.\r\n\r\n Martin Goellnitz  / Wed Nov 9 01:26:57 2016 [b5187ae2af3e8718fc943ccc21bbe1fd91458174](https://github.com/mgoellnitz/trackdown/commit/b5187ae2af3e8718fc943ccc21bbe1fd91458174)\r\n\r\n    refs #SYNCHRONIZE roapmap on every commit\r\n\r\n Martin Goellnitz  / Wed Nov 9 01:32:00 2016 [4802cb811866529bcb52b100693219a206fa1e43](https://github.com/mgoellnitz/trackdown/commit/4802cb811866529bcb52b100693219a206fa1e43)\r\n\r\n    resolve #SYNCHRONIZE roadmap also on otherwise unhandled commits\r\n\r\n## ROOT directory of the source code must be a valid roadmap and issue file location (resolved)\r\n\r\n*1.0*\r\n\r\nDue to forced set of symbolic links in the root directory of the source code\r\nrespository to the roadmap and issue collection file, the 'use' step fails.\r\n\r\n Martin Goellnitz  /    Tue Sep 6 21:29:12 2016 +0200\r\n\r\n    refs #ROOT - make root directory of source code a valid place for the issue collection file and roadmap file\r\n\r\n## UPDATE command for the commit hook (resolved)\r\n\r\n*1.0*\r\n\r\nAdd an update command so that the commit hook can be updated alongside the\r\ntool script to be in sync.\r\n\r\n## HASH of the commit should be part of the listing (resolved)\r\n\r\n*1.0*\r\n\r\nWhen adding a commit note to the issue collection file, the hash of that\r\ncommit should be part of the message alongside with the date and author.\r\n\r\n## PREFIX hashes in commit notes to form a URL (resolved)\r\n\r\n*1.0*\r\n\r\nMany git implementations provide links to single commits with their changes\r\nand other information. Provide configuration options for trackdown to extend\r\nthe commit hashes to full URLs when adding a commit note to the issues \r\ncollection file resulting in callable HTTP-links.\r\n\r\n Martin Goellnitz  / Tue Nov 8 19:22:15 2016  (commit 7931fbc6a6379032e19733af3f343261989c1108)\r\n\r\n    refs #PREFIX commit hashes to form clickable URLs\r\n\r\n Martin Goellnitz  / Tue Nov 8 19:43:10 2016 [0d0f42e3606654c2b036113e411ee313ce4f9493](https://github.com/mgoellnitz/trackdown/commit/0d0f42e3606654c2b036113e411ee313ce4f9493)\r\n\r\n    resolve #PREFIX commit hashes to form clickable links\r\n\r\n## MULTIISSUE There can be only one issue per commit. (resolved)\r\n\r\n*1.0*\r\n\r\nRight now we only support the extraction of one issues ID per [GIT][git] commit.\r\n\r\nMartin Goellnitz Tue Dec 6 18:20:48 2016\r\n\r\n    refs #MULTIISSUE command can be issues in the commit message\r\n\r\nMartin Goellnitz Tue Dec 6 18:52:52 2016\r\n\r\n    fixes #MULTIISSUE needed documentation and a fix\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}