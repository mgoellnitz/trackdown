{
  "name": "Trackdown",
  "tagline": "TrackDown - Issue Tracking with plain Markdown. If you are missing the \"git clone\" for your tickets from github.com or bitbucket.org, then this is for you. A lightweight Ticketing System for distributed and unconnected small Teams.",
  "body": "# TrackDown\r\n\r\n[![License](https://img.shields.io/github/license/mgoellnitz/trackdown.svg)](https://github.com/mgoellnitz/trackdown/blob/master/LICENSE)\r\n\r\nIssue Tracking with plain [Markdown][markdown].\r\n\r\nIn short: You are missing the \"git clone\" for your tickets from [github.com][github]\r\nor [bitbucket.org][bitbucket] where we already have this for code and wiki?\r\n\r\nYou need issue tracking which works for distributed and potentially disconnected\r\nsituations together with your distributed version control [GIT][git] and e.g. your\r\nalso distributed wiki editing through [GIT][git] as well?\r\n\r\nThen this here is for you!\r\n\r\nIt is not intended for large, permanently online or connected teams and heavy \r\nflows of tickets though, since you will be having only one file a plain \r\n[Markdown][markdown] with your issues - and optionally other stuff - collected \r\nin it.\r\n\r\n\r\n# Design\r\n\r\nWhile TrackDown does not define an issue related workflow, it has some intended \r\nworkflow elements which are supported:\r\n\r\nThe issues are defined and maintained in a single [Markdown][markdown] file \r\nfollowing the format given here.\r\n\r\nThe commit hook of TrackDown reads the commit messages and modifies that issue \r\ncollection if your commit messages relate to some of the issues.\r\n\r\nAdditionally a roadmap file is automatically maintained for your tickets.\r\n\r\nThe issue collection this way is held local on your machine and not remote in \r\nthe database of a tracking system. (Which is something also [Fossil][fossil] \r\nsupports.) Like with the source code, it is pushed to remote repositories if \r\nneeded (or possible). The simple [Markdown][markdown] format and the usage of \r\n[GIT][git] as a backend support distributed, shared editing and later merging of \r\nthe issues and the related notes in the issue collection. (This is where the \r\nparallel with [Fossil][fossil] ends).\r\n\r\n\r\n# The Format\r\n\r\nWhile sticking to only partly structured [Markdown][markdown] the following \r\nelements should be maintainable with TrackDown:\r\n\r\n- ID\r\n- Title\r\n- Status\r\n- Commits\r\n- Target Version\r\n- Severity\r\n- Affected Versions\r\n- Description\r\n- Comments\r\n\r\nThese fields are mapped to the following source structure\r\n\r\n```\r\n  ## ID Title (status)\r\n\r\n  *Target Version (optional)*\r\n\r\n  ### severity (optional) priority (optional)\r\n\r\n  affected versions: 1.0, 1.1 (optional)\r\n\r\n  ### Description (optional)\r\n\r\n  description\r\n\r\n  ### Comments (optional)\r\n\r\n  comments (structured)\r\n\r\n  ### Commits (auto generated)\r\n\r\n  The headline commits at level three is optional. The commit messages are \r\n  inserted just as the last part of the issue's level two text area.\r\n```\r\n\r\nThe really fixed non optional parts of this are\r\n\r\n```\r\n  ## ID Title (status)\r\n\r\n  (Commit messages inserted here before the next ticket)\r\n```\r\n\r\n\r\n## Field Values\r\n\r\n### ID\r\n\r\nAny combination of (english) upper- and lower-case letters and digits.\r\n\r\n### Title\r\n\r\nAny expressible in Markdown.\r\n\r\n### Status\r\n\r\nAnything expressible in Markdown. Automatically set values are \"in progress\" if\r\nyou start committing for a certain ID and \"resolved\", if you are using a prefix\r\nof \"fixes ID\" or \"resolves ID\".\r\n\r\nOther intended values include \"new\", where the issue is just files, and \"closed\"\r\nwhen the solution is brought into production.\r\n\r\n### Target Version\r\n\r\nOnyl digits, letters and dots. No spaces allowed.\r\n\r\n```\r\n  Future-Work Will be evaluated to calculate your project's roadmap\r\n```\r\n\r\n### Description\r\n\r\nAnything expressible in Markdown.\r\n\r\n### Affected Versions\r\n\r\nAnything expressible in Markdown. Is expected to describe which version are\r\naffected by the issue (if this is possible to say).\r\n\r\n### Comments\r\n\r\nAnything expressible in Markdown.\r\n\r\n### Severity\r\n\r\nAnything expressible in Markdown.\r\n\r\n\r\n# Setup\r\n\r\nThere are two ways to setup TrackDown: Have the issues file integrated in your\r\nsource code repository, or place it in a arbitrary place of your chosing.\r\n\r\nThe first - default - way is to use it in a separate branch of you source code \r\nrepository and have it editable in your IDE through a symbolic link to the issue \r\ncollection file which is maintained by you through direct typing or the commit \r\nhook integration.\r\n\r\nThe second way is to use the file at a different location - e.g. in the wiki of\r\nthe project instead of the source code repository, which is described later.\r\n\r\n## Initialize the Repository\r\n\r\nIf you want to track the issues in a trackdown branch of your source code \r\nrepository and not in any other location of your chosing, you need to modify the \r\n[GIT][git] repository accordingly. Your source code repository must contain at \r\nleast one commit for this to work. To initialize a [GIT][git] repository that \r\nway, call the script\r\n\r\n```\r\n  trackdown.sh init\r\n```\r\n\r\nThis creates the TrackDown thread for the issue tracking. You have to manually\r\npropagate this thread to your upstream repositories. TrackDown does not\r\ninterfere with your remote workflow.\r\n\r\n```\r\n  git push original trackdown\r\n```\r\n\r\nInitialization must only be executed once for a repository and all of its forks \r\nand clones.\r\n\r\nIf you want to use the issue collection file from a different location, leave\r\nout this step.\r\n\r\n## Repository Integration\r\n\r\nRegardless of the location of the issue collection file, for each clone of the\r\nrepository you have to set up the TrackDown tooling to be able to use it\r\nintegrated with your source code [GIT][git] commits.\r\n\r\nTo start using TrackDown for the respective clone you have to issue\r\n\r\n```\r\n  trackdown.sh use\r\n```\r\n\r\nwhen using the TrackDown branch in the source code repository or\r\n\r\n```\r\n  trackdown.sh use <path/to/issues.md>\r\n```\r\n\r\nlike in\r\n\r\n```\r\n  trackdown.sh use ../wiki/issues.md\r\n```\r\n\r\nwhen using TrackDown with the issue collection file at a different location.\r\nAutomatic commit and push (see below) will be switched of in the latter case.\r\n\r\nThis creates a gitignored link issues.md in the root directory of your project\r\npointing to the issue collection file and it will configure a post-commit hook\r\nfor [GIT][git].\r\n\r\nAfter this step you can edit the issue collection file following the format\r\nmentioned here.\r\n\r\n\r\n# Commands in the Commit Messages\r\n\r\nRight now TrackDown understands only two commands in the commit messages. It \r\nrelies on a git implementation which is capable if executing the script hooks. \r\n\r\nJGit is lacking this (for the post commit hooks used here) and as a result \r\nNetBeans and Eclipse cannot use this mimik!\r\n\r\n## refs *id*\r\n\r\nReference the commit in the list of commits at the end of the issue text.\r\n\r\n```\r\ngit commit -m \"refs #MYID - comment\" files...\r\n```\r\n\r\nThis command changes the state to \"in progress\" from anything like new, nothing,\r\nor even resolved\r\n\r\n```\r\n  (Future work: lifts the issue up to the top of the list)\r\n```\r\n\r\n## resolves|fixes *id*\r\n\r\nReference the commit in the list of commits at the end of the issue text.\r\n\r\n```\r\ngit commit -m \"fixes #MYID - comment\" files...\r\n```\r\n\r\nThis command changes the state to \"resolved\" from anything like new, nothing, or\r\nin progress\r\n\r\n```\r\n  (Future work: moves the issue to the top the part of the list where the resolved issues reside)\r\n```\r\n\r\n\r\n# Command Line Tools\r\n\r\nIn addition to the init and integration tools the following commands are available\r\n\r\n## Roadmap\r\n\r\nThe command\r\n\r\n```\r\n  trackdown.sh roadmap\r\n```\r\n\r\nprints out a complete roadmap of the project if you entered \"target version\"s for\r\nyou issues sorted by \"target versions\" in [Markdown][markdown] format.\r\n\r\nThe term \"target version\" could also be read as \"release\" or \"sprint\" or anything\r\nwhich describes your development process best.\r\n\r\n\r\n## List\r\n\r\nThe command `ls` is used to show all issues from a given \"target version\" like in\r\n\r\n```\r\n  trackdown.sh ls 1.1\r\n```\r\n\r\nwhere all issues intended to be completed in \"target version\" 1.1 are listed.\r\n\r\nThe term \"target version\" could also be read as \"release\" or \"sprint\" or anything\r\nwhich describes your development process best.\r\n\r\n\r\n## Issues\r\n\r\nThe command\r\n\r\n```\r\n  trackdown.sh issues\r\n```\r\n\r\nlist all potential issues in the issue collection. Potential means in this case,\r\nthat there may be some false positives if you not only collect issues with this\r\ntool.\r\n\r\nOptionally you can add a path to an issue collection file as a parameter like in\r\n\r\n```\r\n  trackdown.sh use ../wiki/issues.md\r\n```\r\n\r\n\r\n# Configuration\r\n\r\nThe source repository contains a directory named .trackdown.\r\n\r\nThis directory contains a file named config. There are some options in this\r\nfile, which you can change.\r\n\r\nExample config file for TrackDown:\r\n\r\n```\r\n  autocommit=true\r\n  autopush=false\r\n  location=../wiki/issues.md\r\n```\r\n\r\n\r\n```\r\n  (Future Work: It also contains a file named trackdown.sh update for TrackDown updates)\r\n```\r\n\r\n## Auto Commit all Issue Collection Changes\r\n\r\nAutomatically commits the new change to the trackdown branch. If you didn't\r\nchange the default location where your normal source code repository contains\r\nthe trackdown branch will want to leave the unchanged to true.\r\n\r\nIn other scenarios you may switch it to false.\r\n\r\n## Auto Push all Issue Collection Commits\r\n\r\nAutomatically pushes after each commit to the upstream repository. If you didn't\r\nchangethe default locations where your normal source code repository is the\r\nupstream repository of your issue collection you will want to leave the unchanged\r\nto *true*.\r\n\r\nIn other scenarios you may switch it to false. E.g. if the issue collection is\r\npart of your project wiki then automatically pushing might lead to remote\r\noperations which is not desirable.\r\n\r\n\r\n# Installation\r\n\r\nJust copy the files from bin/ to a place on your $PATH for now. Perhaps we will\r\nadd something more convenient later.\r\n\r\nOf course this way the remaining Windows users are locked out.\r\n\r\n# Related Projects\r\n\r\nI only came accross relates projects which have certain limitations or are \r\nunmaintained.\r\n\r\n## Related Projects with Limitations\r\n\r\n- Fossil\r\n\r\n## Unmaintained related Projects\r\n\r\n - https://github.com/glogiotatidis/gitissius\r\n\r\n# Issues\r\n\r\nRight now we have three collections/iterations/sprints in this issue list:\r\n\r\n- *1.0* This should be accomplished before an 1.0 release.\r\n- *nth* This feature is nice to have but can be left out.\r\n- *oos* This issue is relevant but out of the scope of this project.\r\n\r\n## Doesn't interoperate with NetBeans\r\n\r\n*oos*\r\n\r\nWhile some IDE integrations rely on the git command line tooling and thus work\r\nperfectly together with this project, NetBeans decided to use the JGit library,\r\nwhich onyl supports a subsets of the git hooks - and not the ones we use here.\r\n\r\n## COPY release notes.\r\n\r\n*1.0*\r\n\r\nWhen closing a release or sprint, it should be possible to copy all the resolved\r\nissues to a new [Markdown][markdown] file to remove the from the issue collection\r\nand have a contribution to release notes.\r\n\r\n## MULTIISSUE There can be only one issue per commit.\r\n\r\n*nth*\r\n\r\nRight now we only support the extraction of one issues ID per git commit.\r\n\r\n[markdown]: https://daringfireball.net/projects/markdown/\r\n[git]: http://git-scm.com/\r\n[trac]: http://trac.edgewall.org/\r\n[bitbucket]: https://bitbucket.org/\r\n[fossil]: http://fossil-scm.org/index.html/doc/trunk/www/index.wiki\r\n[github]: https://github.com/\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}